<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
例如namespace="example.mapping.userMapper"就是mexample.mapping(包名)+userMapper(userMapper.xml文件去除后缀)
 -->
<mapper namespace="example.mapping.userMapper">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
    使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
    resultType="me.gacl.domain.User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--
        根据id查询得到一个user对象
     -->
    <select id="getUser" parameterType="int"
            resultType="example.pojo.User">
        select * from users where id=#{id}
    </select>
    <!--创建用户-->
    <insert id="addUser" parameterType="example.pojo.User">
--         插入数据的主键自增长返回到实体类中
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
-- 使用uuid需要把对应的数据库表的字段设置为string长度为35，以及实体类中的属性修改
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">-->
            <!--select uuid()-->
        <!--</selectKey>-->

        insert into users (name,age) values (#{name},#{age})
    </insert>
    <!--删除用户-->
    <delete id="deleteUser" parameterType="int">
        delete  from users where  id=#{id}
    </delete>
    <!--修改用户-->
    <update id="updateUser" parameterType="example.pojo.User">
        update users set name=#{name},age=#{age} where id=#{id}
    </update>

    <!--查询全部用户-->
    <select id="getAllUsers" resultType="example.pojo.User">

        select * from users

    </select>


</mapper>